// Generated by CoffeeScript 1.7.1
(function() {
  var ENV, URL, cfEnv, getCore, getEnv, getJSONenv, getPort, getServerURLs, ports, _;

  URL = require("url");

  _ = require("underscore");

  ports = require("ports");

  ENV = null;

  cfEnv = exports;

  cfEnv.setEnv = function(env) {
    return ENV = JSON.parse(JSON.stringify(env));
  };

  cfEnv.getCore = function(options) {
    if (options == null) {
      options = {};
    }
    return getCore(options);
  };

  cfEnv.getServices = function() {
    var result, service, services, type, vcapServices, _i, _len;
    vcapServices = getJSONenv("VCAP_SERVICES");
    result = {};
    for (type in vcapServices) {
      services = vcapServices[type];
      for (_i = 0, _len = services.length; _i < _len; _i++) {
        service = services[_i];
        result[service.name] = service;
      }
    }
    return result;
  };

  cfEnv.getService = function(spec) {
    var matches, name, service, services;
    if (_.isRegExp(spec)) {
      matches = function(name) {
        return name.match(spec);
      };
    } else {
      spec = "" + spec;
      matches = function(name) {
        return name === spec;
      };
    }
    services = cfEnv.getServices();
    for (name in services) {
      service = services[name];
      if (matches(name)) {
        return service;
      }
    }
    return null;
  };

  cfEnv.getServiceURL = function(spec, replacements) {
    var credentials, key, password, purl, service, url, userid, value;
    if (replacements == null) {
      replacements = {};
    }
    service = cfEnv.getService(spec);
    credentials = service != null ? service.credentials : void 0;
    if (credentials == null) {
      return null;
    }
    replacements = _.clone(replacements);
    if (replacements.url) {
      url = credentials[replacements.url];
    } else {
      url = credentials.url;
    }
    if (url == null) {
      return null;
    }
    delete replacements.url;
    purl = URL.parse(url);
    for (key in replacements) {
      value = replacements[key];
      if (key === "auth") {
        userid = value[0], password = value[1];
        purl[key] = "" + credentials[userid] + ":" + credentials[password];
      } else {
        purl[key] = credentials[value];
      }
    }
    return URL.format(purl);
  };

  getEnv = function() {
    if (ENV != null) {
      return ENV;
    }
    return process.env;
  };

  getCore = function(options) {
    var app, bind, name, port, protocol, services, url, urls;
    name = options.name, protocol = options.protocol;
    app = getJSONenv("VCAP_APPLICATION");
    services = getJSONenv("VCAP_SERVICES");
    name = (app != null ? app.name : void 0) || name;
    port = getPort(name);
    bind = (app != null ? app.host : void 0) || "localhost";
    urls = getServerURLs(protocol, app, port);
    url = urls[0];
    return {
      app: app,
      services: services,
      name: name,
      port: port,
      bind: bind,
      urls: urls,
      url: url
    };
  };

  getServerURLs = function(protocol, app, port) {
    var uri, uris, urls;
    uris = app != null ? app.uris : void 0;
    if (!uris) {
      protocol = protocol || "http:";
      return ["" + protocol + "//localhost:" + port];
    }
    protocol = protocol || "https:";
    urls = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = uris.length; _i < _len; _i++) {
        uri = uris[_i];
        _results.push("" + protocol + "//" + uri);
      }
      return _results;
    })();
    return urls;
  };

  getPort = function(name) {
    var port, portString;
    portString = getEnv().VCAP_APP_PORT || getEnv().PORT;
    if (portString == null) {
      if (name == null) {
        return 3000;
      }
      portString = "" + (ports.getPort(name));
    }
    port = parseInt(portString, 10);
    if (isNaN(port)) {
      throw new Error("invalid port string: " + portString);
    }
    return port;
  };

  getJSONenv = function(name) {
    var e, jsonEnv;
    jsonEnv = getEnv()[name];
    if (jsonEnv == null) {
      return null;
    }
    try {
      return JSON.parse(jsonEnv);
    } catch (_error) {
      e = _error;
      throw new Error("expecting environment variable " + name + " to be JSON: " + jsonEnv);
    }
  };

}).call(this);
