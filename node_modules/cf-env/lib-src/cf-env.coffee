# Licensed under the Apache License. See footer for details.

URL  = require "url"

_     = require "underscore"
ports = require "ports"

#-------------------------------------------------------------------------------
# override of process.env to use in processing
#-------------------------------------------------------------------------------
ENV = null

#-------------------------------------------------------------------------------
# properties on the cfEnv object will be the module exports
#-------------------------------------------------------------------------------
cfEnv = exports

#-------------------------------------------------------------------------------
cfEnv.setEnv = (env) ->
    ENV = JSON.parse JSON.stringify env

#-------------------------------------------------------------------------------
cfEnv.getCore = (options={}) ->
    return getCore options

#-------------------------------------------------------------------------------
cfEnv.getServices = ->
    vcapServices = getJSONenv "VCAP_SERVICES"
    result = {}

    for type, services of vcapServices
        for service in services
            result[service.name] = service

    return result

#-------------------------------------------------------------------------------
cfEnv.getService = (spec) ->

    # set our matching function
    if _.isRegExp spec
        matches = (name) -> name.match spec
    else
        spec = "#{spec}"
        matches = (name) -> name is spec

    services = cfEnv.getServices()
    for name, service of services
        if matches name
            return service

    # no matches :-(
    return null

#-------------------------------------------------------------------------------
cfEnv.getServiceURL = (spec, replacements={}) ->
    service     = cfEnv.getService spec
    credentials = service?.credentials
    return null unless credentials?

    replacements = _.clone replacements

    if replacements.url
        url = credentials[replacements.url]
    else
        url = credentials.url

    return null unless url?

    delete replacements.url

    purl = URL.parse url

    for key, value of replacements
        if key is "auth"
            [userid, password] = value
            purl[key] = "#{credentials[userid]}:#{credentials[password]}"
        else
            purl[key] = credentials[value]

    return URL.format purl

#-------------------------------------------------------------------------------
getEnv = ->
    return ENV if ENV?
    return process.env

#-------------------------------------------------------------------------------
getCore = (options) ->
    {name, protocol} = options

    app       = getJSONenv "VCAP_APPLICATION"
    services  = getJSONenv "VCAP_SERVICES"
    name      = app?.name || name
    port      = getPort name
    bind      = app?.host || "localhost"
    urls      = getServerURLs protocol, app, port
    url       = urls[0]

    return {app, services, name, port, bind, urls, url}

#-------------------------------------------------------------------------------
getServerURLs = (protocol, app, port) ->
    uris = app?.uris

    unless uris
        protocol = protocol || "http:"
        return [ "#{protocol}//localhost:#{port}" ]

    protocol = protocol || "https:"

    urls = for uri in uris
        "#{protocol}//#{uri}"

    return urls

#-------------------------------------------------------------------------------
getPort = (name) ->
    portString = getEnv().VCAP_APP_PORT || getEnv().PORT

    unless portString?
        return 3000 unless name?

        portString = "#{ports.getPort name}"

    port = parseInt portString, 10
    throw new Error "invalid port string: #{portString}" if isNaN port

    return port

#-------------------------------------------------------------------------------
getJSONenv = (name) ->
    jsonEnv = getEnv()[name]
    return null unless jsonEnv?

    try
        return JSON.parse jsonEnv
    catch e
        throw new Error "expecting environment variable #{name} to be JSON: #{jsonEnv}"

#-------------------------------------------------------------------------------
# Copyright IBM Corp. 2014
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
