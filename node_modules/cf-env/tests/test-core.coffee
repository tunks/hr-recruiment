# Licensed under the Apache License. See footer for details.

fs   = require "fs"
path = require "path"

coffee = require "coffee-script"
expect = require "expect.js"
ports  = require "ports"

cfEnv = require ".."

#-------------------------------------------------------------------------------
describe "core", ->

    #---------------------------------------------------------------------------
    it "should handle empty environment", ->
        cfEnv.setEnv {}

        core = cfEnv.getCore()
        expect(core.name).not.to.be.ok()
        expect(core.port).to.be 3000
        expect(core.bind).to.be "localhost"
        expect(core.urls.length).to.be 1
        expect(core.urls[0]).to.be core.url
        expect(core.url).to.be "http://localhost:3000"

    #---------------------------------------------------------------------------
    it "should handle getting port via ports.getPort()", ->
        name = "cf-env-testing-app"
        port = ports.getPort name
        cfEnv.setEnv null

        core = cfEnv.getCore {name}
        expect(core.name).to.be name
        expect(core.port).to.be port
        expect(core.bind).to.be "localhost"
        expect(core.urls.length).to.be 1
        expect(core.urls[0]).to.be core.url
        expect(core.url).to.be "http://localhost:#{port}"

    #---------------------------------------------------------------------------
    it "should handle getting port via PORT env var", ->

        cfEnv.setEnv PORT: 6000

        core = cfEnv.getCore()
        expect(core.name).not.to.be.ok()
        expect(core.port).to.be 6000
        expect(core.bind).to.be "localhost"
        expect(core.urls.length).to.be 1
        expect(core.urls[0]).to.be core.url
        expect(core.url).to.be "http://localhost:6000"

    #---------------------------------------------------------------------------
    it "should handle getCore({name}) default", ->
        name = "cf-env-testing-app"

        cfEnv.setEnv
            VCAP_APPLICATION: JSON.stringify {name}

        core = cfEnv.getCore {name: "#{name}-parm"}
        expect(core.name).to.be name
        expect(core.port).to.be ports.getPort name

    #---------------------------------------------------------------------------
    it "should handle getCore({protocol})", ->

        cfEnv.setEnv null

        core = cfEnv.getCore protocol: "https:"
        expect(core.name).not.to.be.ok()
        expect(core.port).to.be 3000
        expect(core.bind).to.be "localhost"
        expect(core.urls.length).to.be 1
        expect(core.urls[0]).to.be core.url
        expect(core.url).to.be "https://localhost:3000"

    #---------------------------------------------------------------------------
    it "should handle data-01.cson", ->
        setFakeEnv "data-01.cson"

        core = cfEnv.getCore()
        expect(core.app.host).to.be "0.0.0.0"
        expect(core.services["user-provided"]).to.be.ok()
        expect(core.name).to.be "cf-env-test"
        expect(core.port).to.be 61165
        expect(core.bind).to.be "0.0.0.0"
        expect(core.urls.length).to.be 1
        expect(core.urls[0]).to.be core.url
        expect(core.url).to.be "https://cf-env-test.ng.bluemix.net"

        services = cfEnv.getServices()

        for name, service1 in services
            service2 = cfEnv.getService name
            expect(JS service1).to.be(JS service2)

        service1 = cfEnv.getService "cf-env-test"
        service2 = cfEnv.getService /env/
        expect(JS service1).to.be(JS service2)

        url = cfEnv.getServiceURL "cf-env-test",
            pathname: "database"
            auth:     ["username", "password"]

        expect(url).to.be "https://userid:passw0rd@example.com/database"

#-------------------------------------------------------------------------------
JS = (object) -> JSON.stringify object
JL = (object) -> JSON.stringify object, null, 4

#-------------------------------------------------------------------------------
setFakeEnv = (fileName) ->
    fileName = path.join __dirname, fileName
    contents = fs.readFileSync fileName, "utf8"
    env      = coffee.eval contents

    for key in ["VCAP_APPLICATION", "VCAP_SERVICES"]
        if env[key]?
            env[key] = JSON.stringify env[key]

    cfEnv.setEnv env

#-------------------------------------------------------------------------------
# Copyright IBM Corp. 2014
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
